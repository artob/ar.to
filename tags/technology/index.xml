<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>technology | Arto Bendiken</title>
    <link>https://ar.to/tags/technology.html</link>
      <atom:link href="https://ar.to/tags/technology/index.xml" rel="self" type="application/rss+xml" />
    <description>technology</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 31 Jul 2015 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://ar.to/img/icon-512.png</url>
      <title>technology</title>
      <link>https://ar.to/tags/technology.html</link>
    </image>
    
    <item>
      <title>The Future of Violence: Robots and Germs, Hackers and Drones</title>
      <link>https://ar.to/2015/07/the-future-of-violence.html</link>
      <pubDate>Fri, 31 Jul 2015 00:00:00 +0000</pubDate>
      <guid>https://ar.to/2015/07/the-future-of-violence.html</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;small&gt;Originally published as &lt;a href=&#34;https://www.goodreads.com/review/show/1351021186&#34; target=&#34;_blank&#34;&gt;a book review in my Goodreads&lt;/a&gt; account.&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Disappointing overall, and at times shallow and boring. One emerges with the assessment that the two authors are easily impressed by surface-level phenomena. They maintain that narratives taught in civics class suffice to illuminate the origins and practice of politics. They perceive a simple world, where stated intentions equal actual objectives, costs can be judged relative to ostensible objectives without minding actual effects, correlation generally implies causation, and the direction of the arrow of causality can be promptly determined. These are characteristics more of a Haidtian moral matrix than the dispassionate analysis one might have wished for in a book of this kind.&lt;/p&gt;

&lt;p&gt;The authors speak confidently about their ability to understand and predict this neatly modeled world of theirs, not particularly endeavoring to uncover their own implicit premises&amp;mdash;brief mentions of Western liberalism aside&amp;mdash;and rarely hedging or qualifying their rather confident assertions, many which could readily be challenged. In the gulf between reality and academia, this work is more a product of its environment than a root cause analysis that will stand the test of time.&lt;/p&gt;

&lt;p&gt;On the bright side, in largely restricting themselves to disruptive technologies with ETAs defined with pretty firm confidence margins, we were at least spared yet another alarmist narrative of shoddily-premised and amateurishly-informed more speculative futures, which in this instance might have been titled something like &amp;ldquo;the state v. gray goo&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Indeed, the most readable part of the book is the initial bit that discusses some of the developing technologies of mass empowerment that are set to make the first half of this century an &amp;ldquo;interesting times&amp;rdquo; to live through per that purported old Chinese curse. There is nothing new here, but it is at least a useful overview of biotech terrors to come as well as the developing arms race in autonomous weaponry, soon to be wielded by state and non-state actors both.&lt;/p&gt;

&lt;p&gt;This is followed, alas, by the middle portion of the book, where I suspect the authors will tend to lose readers who aren&amp;rsquo;t Beltway policy wonks. These chapters are, chiefly, tedious apologia for the ostensible origins and continued existence of the state. The authors glimpse the coming sea change, but prove ultimately unable to transcend or escape the shore.&lt;/p&gt;

&lt;p&gt;Almost pathetically obsessed with the continuation of the authority and legitimacy of the status quo in political organization today (perhaps their jobs depend on it?), the authors even go on to disregard their own contention&amp;mdash;grounded in the myth of the social contract&amp;mdash;that the state is only a means, not an end unto itself. Their own authority bias here leads them down a garden path of motivated reasoning that is sure to not only find itself on the wrong side of history, but soon enough swept into its dust bin.&lt;/p&gt;

&lt;p&gt;The authors rehash elementary early modern political theory at length&amp;mdash;beginning with the Hobbesian war of all against all&amp;mdash;taking it all at face value as would any freshman. To say that this is a historically uninformed and philosophically unsophisticated analysis would only scratch the surface here, and the authors seem impossibly yet genuinely unaware of troves and generations of thinkers and scholars who advanced in leaps and bounds on everything they discuss here.&lt;/p&gt;

&lt;p&gt;One might have hoped, ultimately, for a deeper nonideological and amoral (&amp;ldquo;check your morality at the door, please&amp;rdquo;) analysis premised, say, on an evolutionary and game-theoretic angle instead of this longwinded trite elaboration of the dominant political mythology du jour, consisting of little more than post-hoc rationalizations that already read akin to medieval notions of the divine right of kings. What&amp;rsquo;s a little surprising is that the authors even acknowledge these being mere justifications for the Westphalian order, prompting the question of whether this ought to not be read as an extended bit of demagoguery in the Menckenian sense of &lt;em&gt;&amp;ldquo;preaching doctrines one knows to be untrue to men one knows to be idiots.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The discussion, as it moves on to the prescriptive last third of the book, is further muddled by the authors&amp;rsquo; disregard for the precise use of language to aid in clarity of thought. Never, for instance, do they differentiate between positive liberty and negative liberty&amp;mdash;a distinction both elementary and essential&amp;mdash;which, unsurprisingly, helps lead them absurd conclusions such as that &lt;em&gt;&amp;ldquo;mass surveillance makes us freer.&amp;rdquo;&lt;/em&gt; Edward Snowden&amp;rsquo;s &amp;ldquo;crime&amp;rdquo; accordingly merits a whole section in a similar vein.&lt;/p&gt;

&lt;p&gt;At root, though, unexamined and uncontested, lies the belief that, given sufficient resources, the state can, in fact, actually achieve its ostensible ends&amp;mdash;whether those ostensible ends be the provision of security as such, or the maintenance of a Tofflerian surplus order. This is a perspective uninformed by economic law and untempered by a developed intuition about spontaneous order; both being sides of the same coin, as per Hayek&amp;rsquo;s dictum that &lt;em&gt;&amp;ldquo;the curious task of economics is to demonstrate to men how little they really know about what they imagine they can design.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Scarcely mentioned, for instance, are the more than trillion dollars and countless lives wasted fighting a futile War on Drugs. Other authors from &lt;a href=&#34;https://www.goodreads.com/author/show/325376&#34; target=&#34;_blank&#34;&gt;Bill Lind&lt;/a&gt; to &lt;a href=&#34;https://www.goodreads.com/author/show/21901&#34; target=&#34;_blank&#34;&gt;T. X. Hammes&lt;/a&gt; have made the case that the inability of the state, with every conceivable home court advantage that it has, to significantly hamper let alone eradicate these 4GW adversaries&amp;mdash;in this case, the drug cartels and their international distribution network&amp;mdash;perfectly showcases its impotence in credibly countering more dangerous internal and external adversaries going forward.&lt;/p&gt;

&lt;p&gt;Instead of the epistemic humility to limit themselves to the merely descriptive and predictive, the authors here choose to be prescriptive; too bad, only, that it is on such an axiomatically deficient and analytically shallow platform. As such, this amounts to rearranging deck chairs on the Titanic&amp;mdash;or make that SS Leviathan. The book best serves to underline the incompetence of the extended modern state apparatus to comprehend and cope with the rapidly multiplying and escalating challenges to its formerly unilateral hegemony. As Boyd would cackle, &lt;em&gt;&amp;ldquo;you&amp;rsquo;re not even in the game!&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A case example thereof is that much of the discussion in the section on so-called &amp;ldquo;intermediate regulation&amp;rdquo; has already been obsoleted by subsequent technological developments, and that&amp;rsquo;s all in the span of less than a decade past the authority they cite as the basis for their narrative here. You&amp;rsquo;d never imagine the authors to have heard of these newer developments, even as events were in the process of overtaking and obsoleting their manuscript.&lt;/p&gt;

&lt;p&gt;In their conclusion, the authors tacitly acknowledge that the future is ungovernable, but go on to say that they&amp;rsquo;re &lt;em&gt;&amp;ldquo;not ready to give up on the state&amp;rdquo;&lt;/em&gt; yet. Good for them. For a deeper, more realistic, and better informed picture of the unfolding twenty-first century, pass on this and read the likes of &lt;a href=&#34;https://www.goodreads.com/author/show/8642675&#34; target=&#34;_blank&#34;&gt;John Robb&lt;/a&gt; and old curmudgeon &lt;a href=&#34;https://www.goodreads.com/author/show/325376&#34; target=&#34;_blank&#34;&gt;Bill Lind&lt;/a&gt; instead.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Unlicense: The First Year in Review</title>
      <link>https://ar.to/2011/01/unlicense-1st-year.html</link>
      <pubDate>Sat, 01 Jan 2011 23:00:00 +0000</pubDate>
      <guid>https://ar.to/2011/01/unlicense-1st-year.html</guid>
      <description>&lt;p&gt;It&amp;rsquo;s &lt;a href=&#34;https://www.law.duke.edu/cspd/publicdomainday&#34; target=&#34;_blank&#34;&gt;Public Domain Day&lt;/a&gt; again, and it&amp;rsquo;s now been exactly a year since I &lt;a href=&#34;https://ar.to/2010/01/set-your-code-free&#34; target=&#34;_blank&#34;&gt;first introduced&lt;/a&gt; the
&lt;a href=&#34;https://unlicense.org&#34; target=&#34;_blank&#34;&gt;Unlicense.org&lt;/a&gt; initiative: an easy-to-use template and process
intended to help coders waive their copyright and dedicate all
their code to the &lt;a href=&#34;https://me.stpeter.im/essays/publicdomain.html&#34; target=&#34;_blank&#34;&gt;public domain&lt;/a&gt; with no strings attached. It seems a good time for a brief recap of the happenings on this front over the last 365 days.&lt;/p&gt;

&lt;p&gt;A year ago, the first three hackers to adopt the Unlicense were &lt;a href=&#34;https://twitter.com/bhuga&#34; target=&#34;_blank&#34;&gt;Ben Lavender&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/zacharyvoase&#34; target=&#34;_blank&#34;&gt;Zachary Voase&lt;/a&gt;, and I. All open-source software the three of us have produced in the last year, combined totaling tens of thousands of lines of code, has been entirely copyright-free. You can &amp;ldquo;steal&amp;rdquo; it all you like, and we just won&amp;rsquo;t care. You can &amp;ldquo;forget&amp;rdquo; to attribute us, and we&amp;rsquo;ll &amp;ldquo;forget&amp;rdquo; to give a damn. We have better things to do. And as it turns out, we&amp;rsquo;re not the only ones to think that way.&lt;/p&gt;

&lt;p&gt;The Unlicense initiative grew from numerous coffee-and-beer discussions the three of us had had throughout the rainy Spanish winter regarding how we could stop copyrighting the code we were each publishing as open source. Informed by much previous reading on the &lt;a href=&#34;https://questioncopyright.org/promise&#34; target=&#34;_blank&#34;&gt;sordid history of copyright&lt;/a&gt;, and philosophically speaking no doubt inspired and prompted by &lt;a href=&#34;https://twitter.com/mikegogulski&#34; target=&#34;_blank&#34;&gt;Mike Gogulski&lt;/a&gt;&amp;rsquo;s visit in the early winter, we had each arrived at the same basic dilemma: we wanted out of the copyright game, but were unsure how it could effectively be done in practice. Precedent was scarce.&lt;/p&gt;

&lt;p&gt;Researching the matter extensively clarified what &lt;a href=&#34;https://ar.to/2010/01/dissecting-the-unlicense&#34; target=&#34;_blank&#34;&gt;had to be done&lt;/a&gt;, but also made clear that few others would have been likely to expend such an effort in figuring it all out. Even if others might otherwise have been inclined to opt out of copyrighting their code, the perceived legal morass of the public domain would have incentivized just using some very permissive license instead. This was a problem that deserved a solution.&lt;/p&gt;

&lt;p&gt;Thus was conceived the legal hack that became the &lt;a href=&#34;https://unlicense.org&#34; target=&#34;_blank&#34;&gt;Unlicense&lt;/a&gt;, a name I had come up with after earlier discussions with &lt;a href=&#34;https://twitter.com/stpeter&#34; target=&#34;_blank&#34;&gt;Peter Saint-Andre&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/leashless&#34; target=&#34;_blank&#34;&gt;Vinay Gupta&lt;/a&gt; about rebranding the public domain.&lt;/p&gt;

&lt;p&gt;As I&amp;rsquo;ve previously detailed in &lt;a href=&#34;https://ar.to/2010/01/dissecting-the-unlicense&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Dissecting the Unlicense: Software Freedom in Four Clauses and a Link&lt;/em&gt;&lt;/a&gt;, the solution presented by the Unlicense was heavily inspired by the approach and the process used by one of the most successful public-domain software projects of all time, the &lt;a href=&#34;https://www.sqlite.org&#34; target=&#34;_blank&#34;&gt;SQLite&lt;/a&gt; database system. If you have a smartphone, you already have SQLite in your pocket. You also almost certainly have SQLite on your desktop or laptop. With at the very least &lt;a href=&#34;https://www.sqlite.org/mostdeployed.html&#34; target=&#34;_blank&#34;&gt;500 million deployments&lt;/a&gt; worldwide, SQLite is everywhere. Its licensing terms, or more to the point its non-licensing terms, have certainly not impeded that success; if anything, they have driven its proliferation.&lt;/p&gt;

&lt;p&gt;Other significant inspiration and ingredients for the Unlicense were the hybrid public-domain dedication and copyright waiver approach used by &lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/&#34; target=&#34;_blank&#34;&gt;Creative Commons Zero&lt;/a&gt;, as well as the don&amp;rsquo;t-sue-me legalese from the widely-used &lt;a href=&#34;https://en.wikipedia.org/wiki/MIT_License&#34; target=&#34;_blank&#34;&gt;MIT/X11 license&lt;/a&gt;. A final component was understanding that open-source software has important established conventions, among them the &lt;code&gt;LICENSE&lt;/code&gt; file, and that beyond everything else we had to also be able to satisfactorily answer pragmatic questions such as &lt;em&gt;&amp;ldquo;But everyone has a license file; hence I need a license file; what do I put in it?&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we launched the Unlicense a year ago, we were not at all certain how it would be received or if it would have any uptake whatsoever. The immediate reaction was perhaps not greatly encouraging: my initial blog post topped the Reddit &amp;ldquo;most controversial&amp;rdquo; list for a time, the &lt;a href=&#34;https://www.reddit.com/r/programming/comments/akrur/set_your_code_free/&#34; target=&#34;_blank&#34;&gt;downvotes eventually winning&lt;/a&gt; the day.&lt;/p&gt;

&lt;p&gt;This was to be expected, as the target audience for the Unlicense really consists only of those developers who are already using permissive licensing; yet &lt;a href=&#34;https://en.wikipedia.org/wiki/Copyleft&#34; target=&#34;_blank&#34;&gt;copyleft&lt;/a&gt; advocates still pretty much dominate open-source communities, though perceptibly in relative terms rather less overbearingly than they did a decade before. So, the Unlicense immediately served to add a new variable and more fuel to the perennial &lt;a href=&#34;https://www.softpanorama.org/Copyright/index.shtml&#34; target=&#34;_blank&#34;&gt;BSD/MIT vs GPL&lt;/a&gt; flamewars. From long &lt;a href=&#34;https://identi.ca/conversation/18829324#notice-18829383&#34; target=&#34;_blank&#34;&gt;conversation threads&lt;/a&gt; on Twitter and Identi.ca, some of the more amusing strong-copyleft reactions included assertions such as that the Unlicense &lt;a href=&#34;https://identi.ca/notice/18829999&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;allows evil stuff&amp;rdquo;&lt;/a&gt; and an implication that we might be some sort of &lt;a href=&#34;https://identi.ca/notice/18831908&#34; target=&#34;_blank&#34;&gt;a Microsoft conspiracy&lt;/a&gt;. (Bill Gates, we&amp;rsquo;re all ears should you wish to fund public-domain advocacy.)&lt;/p&gt;

&lt;p&gt;There were also positive early signs, however. Most importantly, external adoption of the Unlicense began immediately. For example, some programmers initially used the Unlicense for the code snippets that they published on their blogs, or similarly unlicensed smaller scripts and utilities that they published on GitHub and elsewhere. Within a couple of weeks, the popular open-source software blog &lt;a href=&#34;https://ostatic.com&#34; target=&#34;_blank&#34;&gt;OStatic&lt;/a&gt; was &lt;a href=&#34;https://ostatic.com/blog/the-unlicense-a-license-for-no-license&#34; target=&#34;_blank&#34;&gt;describing us as a &amp;ldquo;movement&amp;rdquo;&lt;/a&gt;. They may have jumped the gun on that one a wee bit, but now, a year later, it doesn&amp;rsquo;t seem an entirely unfitting description.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s difficult to give estimates of current Unlicense adoption. We initially tried to maintain &lt;a href=&#34;https://unlicense.org/#unlicensed-free-software&#34; target=&#34;_blank&#34;&gt;a project list&lt;/a&gt; on Unlicense.org, but its current 50-odd listed projects represent only a small subset of the entirety of Unlicense usage out there today. We still add projects to the list upon request, but with &lt;a href=&#34;https://www.google.com/alerts&#34; target=&#34;_blank&#34;&gt;Google Alerts&lt;/a&gt; notifying me of new unlicensed scripts and projects just about every single day, we&amp;rsquo;ve long since passed the point where that list could be considered canonical or up to date.&lt;/p&gt;

&lt;p&gt;The best estimate I can give, from having semi-actively tracked the growth of adoption for the last year, is that there must at the very least now be many hundreds of projects using the Unlicense. I doubt we have yet crossed the 1,000-project mark, but I&amp;rsquo;m quite certain that in another year&amp;rsquo;s time we will have.&lt;/p&gt;

&lt;p&gt;Already as of today, Unlicense adopters include a very diverse range of projects: software libraries, code generators, database abstraction layers and even database engines, web frameworks, HTML templates, blogging engines, low-level network utilities, 3D game engines, command-line utilities, Mac OS X applications, iPhone games, Firefox and Google Chrome extensions, jQuery plugins, Django packages, WordPress plugins, Drupal modules, Ubercart and VirtueMart payment gateways, and much more besides.&lt;/p&gt;

&lt;p&gt;The adoption rate is also growing, as makes sense when awareness of the Unlicense diffuses ever wider, reaching ever more developers. Since we&amp;rsquo;ve done hardly any advocacy other than the rare blog post and occasional tweet, our growth factors have really only been word-of-mouth plus any implicit or explicit references in the documentation of existing unlicensed projects. It seems to have been enough.&lt;/p&gt;

&lt;p&gt;Looking forward to 2011 and beyond, the future of the Unlicense, and the public domain more generally, looks promising.  I recently had the opportunity to engage in a brief &lt;a href=&#34;https://groups.google.com/group/unlicense/browse_thread/thread/6a7f4f1c9d0d1b10&#34; target=&#34;_blank&#34;&gt;dialogue&lt;/a&gt; with &lt;a href=&#34;https://gondwanaland.com/mlog/&#34; target=&#34;_blank&#34;&gt;Mike Linksvayer&lt;/a&gt;, the vice president of &lt;a href=&#34;https://creativecommons.org&#34; target=&#34;_blank&#34;&gt;Creative Commons&lt;/a&gt;. It turns out that the folks at Creative Commons are already aware of the Unlicense initiative, and supportive of it. This is truly gratifying and welcome news indeed.&lt;/p&gt;

&lt;p&gt;Mr. Linksvayer relates that though Creative Commons have previously &lt;a href=&#34;https://wiki.creativecommons.org/FAQ#Can_I_use_a_Creative_Commons_license_for_software.3F&#34; target=&#34;_blank&#34;&gt;discouraged&lt;/a&gt; using any of their licensing instruments for software, there has been discussion concerning the application of CC0, specifically, to cover software as well. This raises the question of how that might affect the Unlicense initiative or whether existing Unlicense adopters would be compatible with CC0 code as well; the answer is simple, due to the public domain being the superset of all more restrictive licensing arrangements.&lt;/p&gt;

&lt;p&gt;Firstly, should CC0 come to be considered an exception to the more general Creative Commons policy regarding applicability to software, Mr. Linksvayer &lt;a href=&#34;https://gondwanaland.com/mlog/2011/01/01/your-public-domain-day/&#34; target=&#34;_blank&#34;&gt;sees that as complementary&lt;/a&gt; to the Unlicense, not competitive. Further, both approaches are fully compatible and interoperable, since both are at base intended as explicit public-domain dedications and copyright waivers, not licenses per se. And it&amp;rsquo;s naturally very easy to remix code that has no strings whatsoever attached to it: there&amp;rsquo;s just nothing to get tangled up in.&lt;/p&gt;

&lt;p&gt;If the Unlicense and CC0 both become viable options for publishing public-domain code, then the choice of which one to use becomes almost just a question of personal brand preference: those more comfortable in the mainstream might perhaps be expected to go with CC0, yet others might still prefer the explicit and strong &amp;ldquo;opt-out&amp;rdquo; subtext of the Unlicense. In any case, both will amount to the same thing: copyright-free code that anyone can use freely for any purpose without restriction.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s to a great 2011 during which we&amp;rsquo;ll seek to collaborate with Creative Commons on establishing both the Unlicense and CC0 more widely, grow the public domain as well as related advocacy and education efforts, and do our part in serving as the crucial counterbalance to copyright laws that keep getting ever worse, never better. Anyone looking to join the conversation should follow &lt;a href=&#34;https://twitter.com/mlinksva&#34; target=&#34;_blank&#34;&gt;@mlinksva&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/bendiken&#34; target=&#34;_blank&#34;&gt;@bendiken&lt;/a&gt; on Twitter and/or Identi.ca, as well as consider subscribing to the &lt;a href=&#34;https://lists.ibiblio.org/mailman/listinfo/cc-licenses&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;CC-licenses&lt;/code&gt;&lt;/a&gt;/&lt;a href=&#34;https://lists.ibiblio.org/mailman/listinfo/cc-community&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;CC-community&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://groups.google.com/group/unlicense&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;Unlicense&lt;/code&gt;&lt;/a&gt; mailing lists.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Licensed, License-Free, and Unlicensed Code</title>
      <link>https://ar.to/2010/12/licensing-and-unlicensing.html</link>
      <pubDate>Sun, 19 Dec 2010 00:00:00 +0000</pubDate>
      <guid>https://ar.to/2010/12/licensing-and-unlicensing.html</guid>
      <description>&lt;p&gt;As discussed on the &lt;a href=&#34;https://unlicense.org&#34; target=&#34;_blank&#34;&gt;Unlicense.org&lt;/a&gt; &lt;a href=&#34;https://groups.google.com/group/unlicense&#34; target=&#34;_blank&#34;&gt;mailing list&lt;/a&gt;, the notion of
&amp;ldquo;licensing something under the Unlicense&amp;rdquo; is a not infrequent
misunderstanding that calls for better explanations as to the essential
difference between licensed, license-free, and unlicensed code. I will
attempt to break it back down to the fundamentals and work upwards from
there.&lt;/p&gt;

&lt;p&gt;To begin, it&amp;rsquo;s useful to briefly review what copyright is and isn&amp;rsquo;t. As
&lt;a href=&#34;https://stpeter.im&#34; target=&#34;_blank&#34;&gt;Peter Saint-Andre&lt;/a&gt; explains in his very readable essay &lt;a href=&#34;https://me.stpeter.im/essays/publicdomain.html&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Who&amp;rsquo;s Afraid
of the Public Domain?&lt;/em&gt;&lt;/a&gt;, copyright is not a &lt;a href=&#34;https://en.wikipedia.org/wiki/Natural_law&#34; target=&#34;_blank&#34;&gt;natural right&lt;/a&gt;.
Rather, it is a government-created distribution monopoly privilege,
&lt;a href=&#34;https://questioncopyright.org/promise&#34; target=&#34;_blank&#34;&gt;ostensibly&lt;/a&gt; instituted on &lt;a href=&#34;https://en.wikipedia.org/wiki/Utilitarianism&#34; target=&#34;_blank&#34;&gt;utilitarian&lt;/a&gt; grounds, and being
(since &lt;a href=&#34;https://en.wikipedia.org/wiki/Berne_Convention_for_the_Protection_of_Literary_and_Artistic_Works&#34; target=&#34;_blank&#34;&gt;1988&lt;/a&gt;) automatically granted you whether you want it or not.&lt;/p&gt;

&lt;p&gt;Knowing that, be sure to wince a little every time you see that
all-too-familiar statement, &lt;em&gt;&amp;ldquo;All rights reserved&amp;rdquo;&lt;/em&gt;, because there are a
couple of problems with it.&lt;/p&gt;

&lt;p&gt;First off, it would be much more accurately restated as &lt;em&gt;&amp;ldquo;All privileges
retained&amp;rdquo;&lt;/em&gt;, since copyright isn&amp;rsquo;t a &amp;ldquo;right&amp;rdquo; at all. Secondly, the statement
as a whole, in any form, is entirely superfluous (since 1988), as it just
refers to the prevailing default state of things: hands off, except if
otherwise explicitly and specifically given permission.&lt;/p&gt;

&lt;p&gt;Meaning that if you stumble across some code with no attached licensing
information, copyright laws would have you treat it as &amp;ldquo;all privileges
retained&amp;rdquo;, even if its author in fact was just trying to make it available
with no strings attached.&lt;/p&gt;

&lt;p&gt;So, this then is why the Unlicense is needed: if you never asked to be a
&lt;a href=&#34;https://ar.to/2010/01/set-your-code-free&#34; target=&#34;_blank&#34;&gt;monopolist&lt;/a&gt;, even a small-time one, and quite simply
have no interest nor desire to be one, it so happens that you actually need
to explicitly &lt;em&gt;tell&lt;/em&gt; your potential users this in the form of a copyright
waiver called a &lt;em&gt;public-domain dedication&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t do this, and just put your software out there without a license
or dedication at all, what you&amp;rsquo;re &lt;em&gt;effectively&lt;/em&gt; doing, according to
copyright laws, is slapping the implicit and forbidding &amp;ldquo;look but don&amp;rsquo;t
touch, and certainly don&amp;rsquo;t copy&amp;rdquo; license on it. The result is known as
&lt;a href=&#34;https://en.wikipedia.org/wiki/License-free_software&#34; target=&#34;_blank&#34;&gt;license-free&lt;/a&gt; software, and won&amp;rsquo;t exactly help make you or your software
very popular.&lt;/p&gt;

&lt;p&gt;By instead adopting the Unlicense for your code, what you&amp;rsquo;re doing is
voluntarily and unequivocally giving up any and all monopoly privileges
granted you by the state and &lt;em&gt;unlicensing&lt;/em&gt; your code into the &lt;em&gt;public
domain&lt;/em&gt;, that is, the pool of entirely uncopyrighted and unencumbered works,
available for anyone to freely use for any purpose.&lt;/p&gt;

&lt;p&gt;Clearly what you&amp;rsquo;re &lt;em&gt;not&lt;/em&gt; doing, then, is &amp;ldquo;licensing&amp;rdquo; your software &amp;ldquo;using
the Unlicense&amp;rdquo;. That would be more than a bit nonsensical: how could your
software be licensed and not licensed at the same time? It&amp;rsquo;s either one or
the other: strings attached or not. The Unlicense is &lt;a href=&#34;https://ar.to/2010/01/dissecting-the-unlicense&#34; target=&#34;_blank&#34;&gt;intended&lt;/a&gt;
to serve as an actual license only as a fallback strategy in backward
jurisdictions that otherwise have trouble recognizing the right of authors
to voluntarily waive all monopoly privileges enforced in their name by the
state.&lt;/p&gt;

&lt;p&gt;Yet we&amp;rsquo;ve now seen a project or two with &lt;code&gt;README&lt;/code&gt; files that proudly claim
&lt;em&gt;&amp;ldquo;Copyright &amp;copy; 2010 J. Random Hacker. All rights reserved.&amp;rdquo;&lt;/em&gt; in one
sentence and then go on to quote from the Unlicense on the very next line,
&lt;em&gt;&amp;ldquo;This is free and unencumbered software released into the public domain.&amp;rdquo;&lt;/em&gt;
Needless to say, those two statements contradict each other in the worst
way.&lt;/p&gt;

&lt;p&gt;In fact, I think these specific examples just go to show how deeply imbedded
the notion of copyright still is in Western culture, even as we&amp;rsquo;re already
otherwise taking the first stumbling steps towards a post-copyright world.&lt;/p&gt;

&lt;p&gt;It seems likely that what the authors in question &lt;em&gt;really&lt;/em&gt; meant to convey
was simply the equivalent of &lt;em&gt;&amp;ldquo;Written by J. Random Hacker&amp;rdquo;&lt;/em&gt;. Writing that
familiar &lt;em&gt;&amp;ldquo;Copyright &amp;copy;&amp;hellip;&amp;rdquo;&lt;/em&gt; had just become so ingrained a habit that it
had practically supplanted the notion of &lt;em&gt;&amp;ldquo;Written by&amp;hellip;&amp;rdquo;&lt;/em&gt; in their minds &amp;ndash;
and in the minds of countless others, myself certainly included in the
not-too-distant past.&lt;/p&gt;

&lt;p&gt;Still, the mistaken notion of &amp;ldquo;licensing something under the Unlicense&amp;rdquo; also
demonstrates why the Unlicense is sorely needed in the first place, and why
it has already enjoyed significant uptake over the course of this year: even
if (at least in certain arbitrary regions of North America) releasing
something into the public domain is, in principle, as simple as stating &lt;em&gt;&amp;ldquo;I
hereby&amp;hellip;&amp;rdquo;&lt;/em&gt;, that can still present too much cognitive dissonance for people
thoroughly inculcated into the modern &amp;ldquo;license-to-live&amp;rdquo; frame of reference.&lt;/p&gt;

&lt;p&gt;Thus &lt;em&gt;&amp;ldquo;but everyone has a license file; hence I need a license file; what do
I put in it?&amp;rdquo;&lt;/em&gt; is but one of the many practical questions the Unlicense
seeks to answer for public-domain software projects, in essence backporting
the copyright-free future into an easy-to-use format suited to the
copyright-afflicted present.&lt;/p&gt;

&lt;p&gt;It is perhaps both inevitable and necessary that, at this still relatively
early stage in the ongoing decline of copyright as an institution,
contradictory or confused statements like &amp;ldquo;licensing something under the
Unlicense&amp;rdquo; abound. They may even be useful as conversation starters on how
unlicensing code into the public domain is fundamentally different from
merely choosing yet another random permissive license.&lt;/p&gt;

&lt;p&gt;An apt contemporary analogy for elucidating the contrast between permissive
licenses and the public domain might be the &amp;ldquo;manage subscriptions&amp;rdquo; and
&amp;ldquo;unsubscribe&amp;rdquo; links in some newsletters.&lt;/p&gt;

&lt;p&gt;A permissive license is like clicking &amp;ldquo;manage subscriptions&amp;rdquo; and unchecking
every option save for &amp;ldquo;demand attribution&amp;rdquo;. The Unlicense is like clicking
&amp;ldquo;unsubscribe&amp;rdquo; and opting out of the copyright game altogether, ahead of the
pack. The fallback strategy of treating the Unlicense as an actual license
is just a workaround for broken unsubscription systems, making use of
&amp;ldquo;manage subscriptions&amp;rdquo; to uncheck all possible options instead.&lt;/p&gt;

&lt;p&gt;Perhaps in another decade or so our common discourse will have left the
speed bump of licensing sufficiently far behind in the dustbin of history
that the kinds of contradictions discussed here will be more readily and
more widely recognized as nonsensical. The very name of initiatives like the
Unlicense can help drive that change, bridging us of the last copyright
generation to the bright and unlicensed &lt;a href=&#34;https://questioncopyright.org/promise&#34; target=&#34;_blank&#34;&gt;post-copyright
future&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dissecting the Unlicense: Software Freedom in Four Clauses and a Link</title>
      <link>https://ar.to/2010/01/dissecting-the-unlicense.html</link>
      <pubDate>Sat, 23 Jan 2010 16:30:00 +0000</pubDate>
      <guid>https://ar.to/2010/01/dissecting-the-unlicense.html</guid>
      <description>&lt;p&gt;I&#39;ve &lt;a href=&#34;https://ar.to/2010/01/set-your-code-free&#34;&gt;previously written&lt;/a&gt; on the motivation that led &lt;a href=&#34;https://groups.google.com/group/unlicense&#34;&gt;us&lt;/a&gt; to formulate the &lt;a href=&#34;https://unlicense.org&#34;&gt;Unlicense&lt;/a&gt;, a template for dedicating your software to the &lt;a href=&#34;https://me.stpeter.im/essays/publicdomain.html&#34;&gt;public domain&lt;/a&gt;. Today, I will elucidate the rationale for and the provenance of each of the four brief paragraphs (plus footer) that constitute the Unlicense.&lt;/p&gt;
&lt;p&gt;The Unlicense combines a public domain dedication and copyright waiver patterned after those of the well-known public domain &lt;a href=&#34;https://www.sqlite.org&#34;&gt;SQLite&lt;/a&gt; project with the no-warranty statement from the widely-used &lt;a href=&#34;https://en.wikipedia.org/wiki/MIT_License&#34;&gt;MIT/X11 license&lt;/a&gt;. We also provide a &lt;a href=&#34;https://unlicense.org/#unlicensing-contributions&#34;&gt;well-defined process&lt;/a&gt; instructing &lt;a href=&#34;https://unlicense.org/#unlicensed-free-software&#34;&gt;Unlicense adopters&lt;/a&gt; on how they can ensure that any third-party contributions remain likewise unencumbered by copyright.&lt;/p&gt;
&lt;p&gt;The entire effort and &lt;a href=&#34;https://ostatic.com/blog/the-unlicense-a-license-for-no-license&#34;&gt;nascent movement&lt;/a&gt; could not have come about without the inspiration and example of the SQLite project, which &lt;a href=&#34;https://www.sqlite.org/mostdeployed.html&#34;&gt;by any measure&lt;/a&gt; is surely to be counted among the most successful public domain software projects of all time. SQLite has combined &lt;a href=&#34;https://aleccolocco.blogspot.com/2009/08/sqlite-lesson-in-low-defect-software.html&#34;&gt;technical excellence&lt;/a&gt; with a unique take on &lt;a href=&#34;https://www.sqlite.org/different.html#license&#34;&gt;liberal licensing&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The source code for SQLite is in the public domain. No claim of copyright
is made on any part of the core source code. [...] This means that
anybody is able to legally do anything they want with the SQLite source
code.&lt;/p&gt;
&lt;p&gt;There are other SQL database engines with liberal licenses that allow the
code to be broadly and freely used. But those other engines are still
governed by copyright law. SQLite is different in that copyright law
simply does not apply.&lt;/p&gt;
&lt;p&gt;The source code files for other SQL database engines typically begin with
a comment describing your license rights to view and copy that file. The
SQLite source code contains no license since it is not governed by
copyright. Instead of a license, the SQLite source code offers a
blessing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;May you do good and not evil&lt;/p&gt;
&lt;p&gt;May you find forgiveness for yourself and forgive others&lt;/p&gt;
&lt;p&gt;May you share freely, never taking more than you give.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Over the years the SQLite project has needed to develop much of the &lt;a href=&#34;https://www.sqlite.org/copyright.html&#34;&gt;legal infrastructure and process&lt;/a&gt; necessary for any large public domain project. This includes e.g. collecting copyright waivers from contributors and issuing &lt;a href=&#34;https://www.hwaci.com/cgi-bin/license-step1&#34;&gt;special one-off licenses&lt;/a&gt; to megacorporations with legal departments unable to grok the concept of the public domain. Many a conversation on the project&#39;s &lt;a href=&#34;https://www.sqlite.org/support.html&#34;&gt;mailing lists&lt;/a&gt; illuminate the legal hurdles they have overcome and provide hoards of valuable information to anyone considering unlicensing their code into the public domain.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://groups.google.com/group/unlicense&#34;&gt;We&lt;/a&gt; launched the Unlicense initiative so that any software developer can now draw on this time-tested knowledge base, infrastructure and process to do what SQLite&#39;s authors have done: &lt;a href=&#34;https://ar.to/2010/01/set-your-code-free&#34;&gt;set their code entirely free&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, it is certainly the case that you can perfectly well dedicate your code to the public domain without using the Unlicense, but information on how to do that can be hard to find and apply. Until now everyone who has released their software into the public domain has done so with differing wording, subject to differing legal interpretation in differing jurisdictions.&lt;/p&gt;
&lt;p&gt;Contrasting this situation with the familiarity of simply copying a license file into your source code repository, it is perhaps no great surprise that many who would otherwise have been inclined to release their code into the public domain have instead opted for some very permissive license, avoiding the perceived legal morass of the public domain. This has constituted a barrier to both the production and adoption of public domain software.&lt;/p&gt;
&lt;p&gt;We hope that the Unlicense can help change this for the better. Think of the Unlicense as a gateway to resurrecting the public domain in software.&lt;/p&gt;
&lt;h2&gt;§1 The Executive Summary&lt;/h2&gt;
&lt;p&gt;The first paragraph of the Unlicense reads:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is free and unencumbered software released into the public domain.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In principle, wording such as this is in and of itself sufficient to dedicate a work to the public domain. In practice, given the litigious age we live in and the variations on how the public domain as a concept may be codified and interpreted in different jurisdictions, most authors will want to be somewhat more explicit. Hence the rest of the Unlicense.&lt;/p&gt;
&lt;p&gt;This first paragraph is, hopefully, self-evident in its simplicity; but let us nonetheless briefly examine its constituents:&lt;/p&gt;
&lt;p&gt;&#34;Free&#34; here means most of the definitions of the word in any English dictionary. It means &#34;for free&#34; as in &#34;gratis&#34; and &#34;given or available without cost, payment or charge&#34;. It means &#34;freedom&#34; as in &#34;not under the control or in the power of another&#34;, implying among other things &#34;not subject to despotic government&#34;. It means &#34;free to&#34; as in &#34;free to make use of&#34;. And, of course, it means &#34;free from&#34; as in &#34;free from copyright&#34; and &#34;free of&#34; as in &#34;not subject to copyright&#34;.&lt;/p&gt;
&lt;p&gt;&#34;Unencumbered&#34; qualifies and helps establish the aforementioned meanings by stating that your use of the software isn&#39;t burdened or weighed down by any restraints or obligations whatsoever; more on this in the next section. Some more loaded alternatives to &#34;unencumbered&#34; would be &#34;unlicensed&#34; or &#34;uncontaminated&#34;, which also convey the notion that the software has no strings attached to it; but for the Unlicense text itself we felt it best to stick with the more neutral term.&lt;/p&gt;
&lt;p&gt;Lastly, &#34;the public domain&#34; means those materials, in this case those pieces of software, that nobody claims as an &lt;a href=&#34;https://levine.sscnet.ucla.edu/general/intellectual/againstfinal.htm&#34;&gt;intellectual monopoly&lt;/a&gt; and hence are not subject to copyright. These works are available for anyone to use freely for any purpose.&lt;/p&gt;
&lt;h2&gt;§2 The Freedoms&lt;/h2&gt;
&lt;p&gt;The second paragraph of the Unlicense reads:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This paragraph originates from &lt;a href=&#34;https://www.sqlite.org&#34;&gt;SQLite&#39;s&lt;/a&gt; &lt;a href=&#34;https://www.sqlite.org/copyright.html&#34;&gt;public domain dedication&lt;/a&gt;, with only &#34;the original SQLite code&#34; changed to &#34;this software&#34;.&lt;/p&gt;
&lt;p&gt;This is simply a listing of some of the specific things you can do with any entirely free public domain software. It is not intended to be exhaustive, merely illustrative. You have &lt;em&gt;complete&lt;/em&gt; freedom to do &lt;em&gt;anything&lt;/em&gt; (&#34;for any purpose&#34;) you want with the software. When someone dedicates their work to the public domain, they are making a public guarantee that they will not send any copyright cops after you even if they personally dislike the uses you&#39;ve put their software to.&lt;/p&gt;
&lt;p&gt;You may notice the similarity to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Evelyn_Beatrice_Hall&#34;&gt;old saying&lt;/a&gt; of &#34;I disapprove of what you say, but I will defend to the death your right to say it.&#34;&lt;/p&gt;
&lt;p&gt;So, yes, you are perfectly welcome to incorporate the code into proprietary software. Yes, you can relicense the code under any license you please. No, you don&#39;t need to include any original copyright statements (there are none) or a copy of the Unlicense. No, you don&#39;t &lt;em&gt;need&lt;/em&gt; to give attribution to the original authors -- though as a matter of common courtesy you probably &lt;em&gt;should&lt;/em&gt; be doing so!&lt;/p&gt;
&lt;p&gt;The legal significance of this Unlicense clause is that even if it so happened that in some backward jurisdiction there were any questions about the interpretation of a public domain dedication like the Unlicense, the authors have here very explicitly granted permission to do just about anything with the software. So, while the Unlicense is not &lt;em&gt;intended&lt;/em&gt; to be, legally speaking, an actual copyright license, but rather merely an explicit form of public domain dedication, the fallback strategy for any public domain-unfriendly jurisdictions is to in fact treat it as if it were an extremely permissive license.&lt;/p&gt;
&lt;p&gt;We would like to eventually improve this paragraph somewhat, to make it read a bit better and to explicitly mention a few more of the things you are allowed to do. Ultimately, it ought to also be somewhat more, well, poetic.&lt;/p&gt;
&lt;h2&gt;§3 The Legalese&lt;/h2&gt;
&lt;p&gt;The third paragraph of the Unlicense reads:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This legally significant paragraph is a statement of intent that has its origins in &lt;a href=&#34;https://www.sqlite.org&#34;&gt;SQLite&#39;s&lt;/a&gt; &lt;a href=&#34;https://www.sqlite.org/copyright.html&#34;&gt;public domain dedication&lt;/a&gt;, which in turn is based on the Creative Commons &lt;a href=&#34;https://creativecommons.org/licenses/publicdomain/&#34;&gt;public domain certification&lt;/a&gt; with the wording changed (improved, I should say) from the third person to the first person.&lt;/p&gt;
&lt;p&gt;This paragraph is important because it establishes &lt;em&gt;intent&lt;/em&gt;. Regardless of how the public domain as a concept is codified in the laws of a particular country, this paragraph makes it very clear that the authors have explicitly disavowed any and all monopoly privileges granted them by copyright law -- in the full knowledge that this could, in theory, be financially detrimental to them.&lt;/p&gt;
&lt;p&gt;Since the fitness of this paragraph has been established in the SQLite project, we incorporated it as-is but for two trivial changes:&lt;/p&gt;
&lt;p&gt;We changed &#34;this code&#34; to &#34;this software&#34; to ensure we&#39;re covering not just the code per se but everything that constitutes the software, typically the entirety of the source and binary distributions. There is better room for appropriate interpretation in &#34;this software&#34; than in &#34;this code&#34;.&lt;/p&gt;
&lt;p&gt;We also very purposefully added the introductory &#34;in jurisdictions that recognize copyright laws&#34; text. Beyond the immediate practical goal of helping you unlicense your software into the public domain, a secondary goal of the Unlicense is to help disseminate the idea that we perhaps really shouldn&#39;t be taking for granted the existence of copyright licensing and copyright laws in the first place.&lt;/p&gt;
&lt;p&gt;If you actually take some time to read about the &lt;a href=&#34;https://questioncopyright.org/promise&#34;&gt;history of copyright&lt;/a&gt;, you will discover that most everything you thought you knew about copyright is mistaken. Despite popular myth, copyright did &lt;em&gt;not&lt;/em&gt;, in fact, come about as some noble effort to protect the rights of authors, but rather has its ignoble origin in the privatization of censorship in 16th century England. Its further developments have been by and for the distributors, as is evident even today with the major media companies seeking, and obtaining, what amount to perpetual extensions to their copyright terms.&lt;/p&gt;
&lt;p&gt;All this notwithstanding, however, everyone twentysomething and younger knows that we are already well on our way to a &lt;a href=&#34;https://levine.sscnet.ucla.edu/general/intellectual/againstfinal.htm&#34;&gt;post-copyright world&lt;/a&gt;. Since we wanted the Unlicense&#39;s wording to stand the test of time, we did not bake in the current implicit assumption that copyright is &#34;just the way things are&#34;. Rather, we baked in the hope for a future where increasingly fewer jurisdictions cling to their obsolete copyright laws at a clear disadvantage to those freer corners of the world that have already let go of the concept.&lt;/p&gt;
&lt;h2&gt;§4 The Don&#39;t-Sue-Me&lt;/h2&gt;
&lt;p&gt;The fourth paragraph of the Unlicense reads:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This no-warranty clause comes almost verbatim from the &lt;a href=&#34;https://en.wikipedia.org/wiki/MIT_License&#34;&gt;MIT/X11 license&lt;/a&gt;, with the &#34;the authors or copyright holders&#34; changed to read merely &#34;the authors&#34;. After all, the whole point of the Unlicense is that there no longer are any copyright holders for the software, only authors.&lt;/p&gt;
&lt;p&gt;Now, it must surely be evident to every reasonable human being that this no-warranty paragraph is, inherently, a redundantly idiotic bunch of all-caps legalese in defense of the perfectly obvious point that &#34;yeah, dumbass, I&#39;ll pay you the $0 in damages that the software cost you.&#34;&lt;/p&gt;
&lt;p&gt;An alternative wording I&#39;m fond of is &#34;assume nothing works, and you may be pleasantly surprised; and when it breaks, you get to keep both pieces.&#34;&lt;/p&gt;
&lt;p&gt;Redundant and idiotic as it may be, we knew we had to include a no-warranty clause of some kind. An often cited, though unwarranted, concern about releasing your software into the public domain is that this could leave you open to damage claims from litigious imbeciles who somehow managed to microwave their cat and burn down the house with the help of your code, whereas using a permissive license with lots of capital letters would magically prevent this.&lt;/p&gt;
&lt;p&gt;So, whether to alleviate a perceived problem or a real one, we felt we did need to very explicitly disclaim any implied warranties as part of the Unlicense public domain dedication. We evaluated the all-caps clauses in various permissive licenses, including the &lt;a href=&#34;https://en.wikipedia.org/wiki/BSD_licenses&#34;&gt;BSD&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/ISC_license&#34;&gt;ISC&lt;/a&gt; licenses. They all read somewhat differently but hit the same points. In the end we preferred the MIT/X11 license&#39;s wording as well as its (relative) brevity, so that&#39;s what we incorporated.&lt;/p&gt;
&lt;p&gt;We have preserved the all-caps nature of the paragraph only for the sake of your reading pleasure, namely so that your eyes can gently and quickly glaze over it and continue on their way.&lt;/p&gt;
&lt;h2&gt;§5 The Link&lt;/h2&gt;
&lt;p&gt;The footer of the Unlicense reads:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For more information, please refer to &lt;a href=&#34;https://unlicense.org&#34;&gt;https://unlicense.org/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This final line of the Unlicense simply contains an optional link to the &lt;a href=&#34;https://unlicense.org&#34;&gt;Unlicense.org&lt;/a&gt; website. This is the only &#34;viral&#34; part of the Unlicense, and, naturally, you&#39;re perfectly welcome to leave it out from your copy of the Unlicense if you should so choose.&lt;/p&gt;
&lt;p&gt;We expect that most adopters of the Unlicense will want to retain the link, however. If you care enough to swim against the mainstream in choosing to unlicense your code into the public domain, you will likely care enough to consider the Unlicense an idea worth spreading. But the choice is up to you.&lt;/p&gt;
&lt;p&gt;This concludes my overview of the ingredients that went into the initial version of the Unlicense. If you believe you can improve on any of this, please join the &lt;a href=&#34;https://groups.google.com/group/unlicense&#34;&gt;Unlicense mailing list&lt;/a&gt; and let us know how.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;Kudos to &lt;a href=&#34;https://bhuga.net&#34;&gt;Ben Lavender&lt;/a&gt; and &lt;a href=&#34;https://www.nostate.com&#34;&gt;Mike Gogulski&lt;/a&gt; for their valuable input on this article.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Set Your Code Free</title>
      <link>https://ar.to/2010/01/set-your-code-free.html</link>
      <pubDate>Fri, 01 Jan 2010 20:00:00 +0000</pubDate>
      <guid>https://ar.to/2010/01/set-your-code-free.html</guid>
      <description>&lt;p&gt;Today is &lt;a href=&#34;https://www.publicdomainday.org&#34;&gt;Public Domain Day&lt;/a&gt;, in honor of which I&amp;#8217;m hereby relicensing (or more properly, &lt;a href=&#34;https://unlicense.org&#34;&gt;&lt;em&gt;unlicensing&lt;/em&gt;&lt;/a&gt;) all of &lt;a href=&#34;https://github.com/artob&#34;&gt;my software&lt;/a&gt; into the public domain.&lt;/p&gt;

&lt;p&gt;As the &lt;a href=&#34;https://me.stpeter.im/essays/publicdomain.html&#34;&gt;public domain&lt;/a&gt; is these days unfortunately somewhat an obscure concept to many people, and disclaiming copyright interest in open-source software seems at present a relatively rare phenomenon (though there exist some &lt;a href=&#34;https://unlicense.org/#public-domain-software&#34;&gt;notable examples&lt;/a&gt;), I will elaborate some on the rationale and implications. As is often the case, there are two kinds of reasons for doing this: the practical and the moral. Let&amp;#8217;s start with some practical reasons.&lt;/p&gt;

&lt;p&gt;If you are an open-source developer like me, licensing is likely a growing headache for you. Yes, it&amp;#8217;s all &amp;#8220;open source&amp;#8221;, but which &lt;a href=&#34;https://www.opensource.org/licenses/alphabetical&#34;&gt;flavor&lt;/a&gt;? Let me ask you: how often have you passed up on utilizing a great software library just because its open source license was not compatible with your own preferred flavor? How many precious hours of your life have you spent deliberating how to license your software or worrying about licensing compatibility with other software? How many wheels have you rewritten because of licensing concerns?&lt;/p&gt;

&lt;p&gt;As you know, there are basically three camps in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Free_software&#34;&gt;FLOSS&lt;/a&gt; movement: viral &lt;a href=&#34;https://en.wikipedia.org/wiki/Copyleft&#34;&gt;copyleft&lt;/a&gt; licensing (so-called &amp;#8220;Free Software&amp;#8221;), permissive licensing (&amp;#8220;open source&amp;#8221;), and the public domain. It&amp;#8217;s fairly evident that this last camp has been somewhat &lt;a href=&#34;https://unlicense.org/#public-domain-software&#34;&gt;underrepresented&lt;/a&gt; in the last decade and more (and there are &lt;a href=&#34;https://en.wikipedia.org/wiki/Berne_Convention_for_the_Protection_of_Literary_and_Artistic_Works&#34;&gt;reasons&lt;/a&gt; for that), with most of the action having taken place in the former two camps. But that could change in an eyeblink.&lt;/p&gt;

&lt;p&gt;Now, if you are like me, you&amp;#8217;ve never cared much for the concept of copyleft to begin with, and have tended to by default prefer more permissive and liberal licenses such as &lt;a href=&#34;https://en.wikipedia.org/wiki/MIT_License&#34;&gt;MIT&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/BSD_licenses&#34;&gt;BSD&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/ISC_license&#34;&gt;ISC&lt;/a&gt; or the &lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_License&#34;&gt;Apache License&lt;/a&gt;. That already puts you very near the public domain in practical terms. Basically, the key difference between these permissive licenses and the public domain is that in the latter you stop holding a gun to your users&amp;#8217; heads regarding attribution. More on this later.&lt;/p&gt;

&lt;p&gt;So, if you&amp;#8217;ve preferred permissive licenses, you probably have often uttered a silent &lt;em&gt;sigh&lt;/em&gt; when you&amp;#8217;ve come across a nice new piece of &lt;a href=&#34;https://en.wikipedia.org/wiki/GNU_General_Public_License&#34;&gt;GPL&lt;/a&gt;/&lt;a href=&#34;https://en.wikipedia.org/wiki/GNU_Lesser_General_Public_License&#34;&gt;LGPL&lt;/a&gt; software whose author has inadvertently doomed it to relative obscurity with his licensing choice. For while you might have extended the software and contributed to the project, your interest level dropped as soon as you saw the licensing terms. It turned out to be the equivalent of contaminated code, and assuming that you are not the only one to feel that way, an unintended consequence of the author&amp;#8217;s licensing choice has been to curtail the pool of early adopters and contributors.&lt;/p&gt;

&lt;p&gt;Having had that experience often enough, I&amp;#8217;ve so far made sure to stick with the MIT license for all my software (excepting special cases with external constraints, such as with &lt;a href=&#34;https://drupal.org/user/26089&#34;&gt;my Drupal modules&lt;/a&gt;). The nice thing about the MIT license and its peers are that they don&amp;#8217;t impede cross-pollination: MIT-licensed code can be directly used without legal problems in other software licensed under an equally-permissive license (e.g. the revised BSD license), and vice versa, because these licenses don&amp;#8217;t attempt to prohibit relicensing.&lt;/p&gt;

&lt;p&gt;Contrast this with the GPL/LGPL, which are one-way streets, or put another way, they are an entry without an exit. To paraphrase a classic song, your code can be checked out anytime you like, but it can never leave. It&amp;#8217;s easy to see that if you want your code to be used as widely as possible, copyleft is perhaps not the way to go. But then, that&amp;#8217;s sort of the whole point of copyleft, of course: you can &lt;em&gt;look&lt;/em&gt; at my code, but if you &lt;em&gt;touch&lt;/em&gt; it in a way I don&amp;#8217;t approve of, I&amp;#8217;ll crucify you with law and impunity.&lt;/p&gt;

&lt;p&gt;This leads us into some of the moral, and immoral, aspects of claiming a state-created and state-enforced &lt;a href=&#34;https://questioncopyright.org/promise&#34;&gt;distribution monopoly&lt;/a&gt; on a piece of software. If you failed Ethics 101 (sociopaths, raise your hand) or are not one to philosophize, you can safely quit reading here.&lt;/p&gt;

&lt;p&gt;What copyrighting your code really comes down to is this: when you include a license statement in your software project, you are effectively making a threat to the users of your software. You are saying that if they don&amp;#8217;t behave according to whatever arbitrary criteria you&amp;#8217;ve set out in your license statement, you will send some men with guns after them. I don&amp;#8217;t know about you, but I think that&amp;#8217;s a pretty shitty thing to do.&lt;/p&gt;

&lt;p&gt;Applying the coercive machinery of the state in this way always boils down to the threat of physical violence for &lt;a href=&#34;https://anarchyinyourhead.com/2009/02/02/the-slave-test/&#34;&gt;non-compliance&lt;/a&gt;. When applied, it &lt;em&gt;usually&lt;/em&gt; fiddles out into &lt;em&gt;merely&lt;/em&gt; financial catastrophe because the victim (that&amp;#8217;d be the so-called &amp;#8220;infringer&amp;#8221;, by the way) doesn&amp;#8217;t put up a fight and does show up in the courtroom to hear the verdict that he is bankrupt.&lt;/p&gt;

&lt;p&gt;The threat of violence is always in the background, though, and what you&amp;#8217;ve done, if you should ever actually press suit for copyright infringement, is given men with guns a pretext for tearing apart a life, or lives, in case your victim doesn&amp;#8217;t decide to play ball. (The inconvenient fact that you actually don&amp;#8217;t possess any right to delegate the initiation of force in this way is a longer topic best suited for a &lt;a href=&#34;https://praxeology.net/anticopyright.htm&#34;&gt;political philosophy&lt;/a&gt; class.)&lt;/p&gt;

&lt;p&gt;Now, I don&amp;#8217;t know about you, but the &lt;em&gt;least&lt;/em&gt; effective way to secure my cooperation is to threaten me. That virtually guarantees that I&amp;#8217;ll do the opposite of what you want (even at personal cost to myself), or at the very least that I will choose not to associate with you in the future.&lt;/p&gt;

&lt;p&gt;When I say that copyleft code is contaminated, I very much mean that. It is code with significant legal strings attached, and when using it you had better be very aware of those strings. Again, of course, that&amp;#8217;s the point of the &lt;a href=&#34;https://www.fsf.org&#34;&gt;FSF&lt;/a&gt;&amp;#8217;s strategy, so in case you agree with their missive you will see this as a benefit. I personally don&amp;#8217;t, because I have no interest whatsoever in wreaking havoc on people who want to use my code or (heaven forbid) profit from it. I have better things to do.&lt;/p&gt;

&lt;p&gt;It is a strange thing, indeed, to think, as copyleft advocates do, that it&amp;#8217;s worth outrage and legal action if somebody incorporates some code of yours into their closed-source proprietary software. In all but the most special of cases, your &amp;#8220;abusers&amp;#8221; have not actually harmed you in any way. In fact, what they have done is paid you a compliment, whether they choose to openly acknowledge it or not.&lt;/p&gt;

&lt;p&gt;Further, if the code they&amp;#8217;ve incorporated is substantial, they have an economic incentive to cooperate with you by contributing patches and enhancements instead of attempting to maintain their own private fork of your software. Hell, they may even hire you. Whether they do so or not, you have not lost anything, and you may have gained something. This is known as a &lt;a href=&#34;https://ar.to/2008/04/zero-sum-delusion&#34;&gt;positive-sum&lt;/a&gt; outcome.&lt;/p&gt;

&lt;p&gt;It is a stranger thing, even, to believe that slapping a licensing statement on your software will in some way prevent such wonderful &amp;#8220;abuse&amp;#8221; in the first place. That is simply a form of &lt;a href=&#34;https://en.wikipedia.org/wiki/Magical_thinking&#34;&gt;magical thinking&lt;/a&gt;. Those who would benefit from your software without reciprocity will do so in any case, with or without your implied copyright-sanctioned threats; and regarding my software I say, they&amp;#8217;re welcome to knock themselves out. It&amp;#8217;s no loss to me.&lt;/p&gt;

&lt;p&gt;Not only copyleft advocates but anybody affixing a licensing statement to open-source software is guilty of either magical thinking or of having an intention to follow up on the implied threat. The only thing your license will prevent, or at least curtail, is the adoption of your software. Let us briefly consider a couple of contemporary examples of whether you can successfully attempt to legislate people&amp;#8217;s private behavior, or merely drive it underground with the force of guns.&lt;/p&gt;

&lt;p&gt;When you smoked that joint last night on New Year&amp;#8217;s Eve, did you care about the fact that it is, supposedly, illegal? You knew perfectly well that there exists some bunch of legalese in some legal code you&amp;#8217;ve never seen that claims, if you can believe it, to give certain men with guns the &amp;#8220;legitimate&amp;#8221; authority to prevent you from ingesting certain natural compounds, and to physically restrain and do violence to you in pursuance of that end.&lt;/p&gt;

&lt;p&gt;Of course, being the reasonable person that you presumably are, you knew all that to be a bunch of &lt;a href=&#34;https://www.freedomsphoenix.com/Opinion/062806-2009-12-16-please-enslave-me.htm&#34;&gt;nonsense&lt;/a&gt; and saw right through that claim of legitimacy. Those paragraphs of legal garbage no more bound you last night than do, well, the dead fingers of the dead lawyers who wrote them. Thus, last night you only took the sensible precaution of avoiding those particular men with guns who irrationally worship those dead fingers, just as you exercised caution about walking home through a bad neighborhood and opted for a cab instead. Smart of you.&lt;/p&gt;

&lt;p&gt;To consider an example perhaps closer to home for those in my captive audience who are merely suffering from a vulgar hangover today: if you are anything like most twentysomethings or younger, you will be quite familiar with torrenting the latest television series, movies and music. You know perfectly well that a bunch of lawyers and politicians claim that what you are doing is &amp;#8220;wrong&amp;#8221; and that they would dearly love to &amp;#8220;punish&amp;#8221; you for it every chance they get, and you don&amp;#8217;t believe a word they say. In fact, pirating entertainment is now so mainstream that only 3% of Canadians and (closer to home, for me) 1% of Spaniards &lt;a href=&#34;https://torrentfreak.com/piracy-has-become-mainstream-studies-show-090313/&#34;&gt;still believe&lt;/a&gt; that it is criminal behavior, so you&amp;#8217;re in good company.&lt;/p&gt;

&lt;p&gt;Not that this will stop the copyright cops, always on the lookout for imaginary abuses of imaginary property, from &amp;#8220;confiscating evidence&amp;#8221; (otherwise known as home invasion plus property theft) and hauling your sorry behind to a courtroom (otherwise known as abduction) if they come knocking. So be safe.&lt;/p&gt;

&lt;p&gt;The practical point being that, if you are twentysomething or younger, you already know that copyright is &lt;a href=&#34;https://newteevee.com/2009/01/31/bittorrent-researcher-copyright-will-be-obsolete-by-2010/&#34;&gt;dead&lt;/a&gt;. It&amp;#8217;s a joke, really. The genie is out of the bottle, and refuses to go back in, but all these middlemen are running around in a panic trying to forcibly stuff it back in. Like the &lt;a href=&#34;https://en.wikipedia.org/wiki/Prohibition_in_the_United_States&#34;&gt;Prohibition&lt;/a&gt; or the so-called &lt;a href=&#34;https://reason.com/archives/2009/02/16/reality-intrudes-on-the-drug-w&#34;&gt;War on Drugs&lt;/a&gt;, it&amp;#8217;s one of those things where the writing is clearly on the wall, and it&amp;#8217;s just a matter of time. The world got along fine &lt;a href=&#34;https://questioncopyright.org/promise&#34;&gt;before copyright&lt;/a&gt;, and will continue to do so (&lt;a href=&#34;https://mises.org/store/Against-Intellectual-Monopoly-P552.aspx&#34;&gt;all the better&lt;/a&gt;, in fact) long after the concept has been given up for the farce that it is. So, why not give it a kick in the behind to speed things along?&lt;/p&gt;

&lt;p&gt;The moral point being that if you&amp;#8217;re pirating copyrighted material or clicking through idiotic &lt;a href=&#34;https://en.wikipedia.org/wiki/Software_license_agreement#End-user_license_agreement&#34;&gt;EULAs&lt;/a&gt; without reading them, why on earth are you still slapping a copyright notice on software you yourself write and release? Do you know what that makes you? It makes you a hypocrite. Nobody wants to be a hypocrite. I&amp;#8217;ve given up being a hypocrite (about this, anyway) today. What about you?&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve collected some resources at &lt;a href=&#34;https://unlicense.org&#34;&gt;Unlicense.org&lt;/a&gt; that will help you unlicense your code into the public domain. Be good.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Road to Enlightenment Is Littered with Irritating, Superfluous Parentheses</title>
      <link>https://ar.to/2007/01/the-road-to-lisp.html</link>
      <pubDate>Mon, 01 Jan 2007 21:30:00 +0000</pubDate>
      <guid>https://ar.to/2007/01/the-road-to-lisp.html</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;small&gt;Originally published at &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://bendiken.net/2007/01/01/the-road-to-lisp&#34; target=&#34;_blank&#34;&gt;http://bendiken.net/2007/01/01/the-road-to-lisp&lt;/a&gt; and the &lt;a href=&#34;https://web.archive.org/web/20070106015849/http://wiki.alu.org/Arto_Bendiken&#39;s_Road_to_Lisp&#34; target=&#34;_blank&#34;&gt;ALU Wiki&lt;/a&gt;.&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I, &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://bendiken.net/&#34; target=&#34;_blank&#34;&gt;Arto Bendiken&lt;/a&gt;, do solemnly offer these my responses to &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://wiki.alu.org/The_Road_to_Lisp_Survey&#34; target=&#34;_blank&#34;&gt;The Road to Lisp Survey&lt;/a&gt;: &lt;/p&gt;

&lt;h3&gt;When did you first try Lisp seriously, and which Lisp family member was it?&lt;/h3&gt;

&lt;p&gt;I read Peter Seibel&amp;#8217;s &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://www.gigamonkeys.com/book/&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Practical Common Lisp&lt;/em&gt;&lt;/a&gt; and Paul Graham&amp;#8217;s &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://www.paulgraham.com/onlisp.html&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;On Lisp&lt;/em&gt;&lt;/a&gt; sometime in mid-2005 or thereabouts. Both proved to be useful introductions to &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Common_Lisp&#34; target=&#34;_blank&#34;&gt;Common Lisp&lt;/a&gt; and gave me an initial appreciation of the unique characteristics of Lisp-derived programming languages.&lt;/p&gt;

&lt;p&gt;After being sufficiently enlightened by those two books, I moved onward to &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Scheme_%28programming_language%29&#34; target=&#34;_blank&#34;&gt;Scheme&lt;/a&gt;. This came about primarily as a result of struggling my way through the &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://mitpress.mit.edu/sicp/&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Wizard Book&lt;/em&gt;&lt;/a&gt; and watching the &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://www.swiss.ai.mit.edu/classes/6.001/abelson-sussman-lectures/&#34; target=&#34;_blank&#34;&gt;6.001 video lectures&lt;/a&gt;, as well as perusing various online tutorials and papers. I&amp;#8217;ve been programming in Scheme ever since, with the occasional foray into Common Lisp.&lt;/p&gt;

&lt;h3&gt;Where did your road originate?&lt;/h3&gt;

&lt;p&gt;I first started programming at the tender age of 11, with the unholy combination of &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/BASIC&#34; target=&#34;_blank&#34;&gt;BASIC&lt;/a&gt; and &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/C_%28programming_language%29&#34; target=&#34;_blank&#34;&gt;C&lt;/a&gt;. (Yes, I&amp;#8217;ve since worked hard to overcome the &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://catb.org/jargon/html/B/BASIC.html&#34; target=&#34;_blank&#34;&gt;brain damage&lt;/a&gt; that caused, thank you very much for asking.)&lt;/p&gt;

&lt;p&gt;Having always been fascinated by the concept of artificial intelligence, I gophered all the AI programs I could find as soon as the Internet hit the scene (which was just a couple of years later, in my case). To my dismay, these programs were pretty much all written in an obscure, half-forgotten language called &lt;span class=&#34;caps&#34;&gt;LISP&lt;/span&gt; (the name was still usually uppercased back then, as I recall).&lt;/p&gt;

&lt;p&gt;At that point in time, this was immensely frustrating. I wanted to write my &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/ELIZA&#34; target=&#34;_blank&#34;&gt;ELIZA&lt;/a&gt; clone and my first &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Neural_net&#34; target=&#34;_blank&#34;&gt;neural net&lt;/a&gt; in C, dammit, and I was pretty sure that example programs written in all uppercase text and containing lots and lots of irritating, obviously superfluous parentheses wouldn&amp;#8217;t help me learn how to do so. Oh, the impatience of youth.&lt;/p&gt;

&lt;p&gt;I proceeded to ignore Lisp for the next decade, wondering aimlessly through the vast wasteland of mainstream programming technologies.&lt;/p&gt;

&lt;h3&gt;What led you to try Lisp?&lt;/h3&gt;

&lt;p&gt;It took half a dozen other programming languages, and seven years of full-time software development, before I came full circle. The key ingredients were &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://www.paulgraham.com/articles.html&#34; target=&#34;_blank&#34;&gt;Graham&amp;#8217;s writings&lt;/a&gt;, Seibel&amp;#8217;s book, and familiarity with &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Ruby_%28programming_language%29&#34; target=&#34;_blank&#34;&gt;Ruby&lt;/a&gt;. But not to get ahead of myself; the story resumes at the turn of the millennium.&lt;/p&gt;

&lt;p&gt;At that time, I was employed as a &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/J2EE&#34; target=&#34;_blank&#34;&gt;J2EE&lt;/a&gt; developer at a largish company, working on various horribly overengineered, enterprisey systems. It was bad enough, at times, that I had almost come to regret my choice of a career. Writing software was apparently a joyless and dull activity, with little room for individual creativity. Half the time was wasted fighting the bloated toolchain, and the other half was lost to red tape, useless meetings or just the constant interruptions in the &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://headrush.typepad.com/creating_passionate_users/2006/02/brain_death_by_.html&#34; target=&#34;_blank&#34;&gt;cubicles&lt;/a&gt; we developers worked in. Thank goodness for overtime. (But of course, it all paid very well; selling your soul tends to.)&lt;/p&gt;

&lt;p&gt;In my copious free time, I worked on a 3D physics engine and did some &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Linux&#34; target=&#34;_blank&#34;&gt;Linux&lt;/a&gt; kernel hacking in C and assembler; just enough to keep the old passion for programming alive. Then one day, though I didn&amp;#8217;t know it at the time, I happened to take a first small step in the right direction at a crucial crossroads: I needed to write a specialized web crawler and had read somewhere that &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://www.google.com/&#34; target=&#34;_blank&#34;&gt;Google&lt;/a&gt; was using a programming language called &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Python_%28programming_language%29&#34; target=&#34;_blank&#34;&gt;Python&lt;/a&gt;, so out of pure curiosity I decided to try and implement my crawler in Python.&lt;/p&gt;

&lt;p&gt;After embarking on this project, it didn&amp;#8217;t take me long to understand how much vastly more productive Python coding was compared to Java&amp;#8217;s endless boilerplate drudgery. Python truly sold me on the benefits of &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Type_system&#34; target=&#34;_blank&#34;&gt;dynamically-typed&lt;/a&gt; languages and rapid prototyping. I began to see that many of the sacred &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/GoF&#34; target=&#34;_blank&#34;&gt;GoF design patterns&lt;/a&gt; were not, in actuality, grand universal truths of software engineering, but simply collateral damage caused by incidental limitations in the abstractive power and object model of certain &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://codecraft.info/index.php/archives/20/&#34; target=&#34;_blank&#34;&gt;manifestly-typed&lt;/a&gt; programming languages.&lt;/p&gt;

&lt;p&gt;Fast forward a couple more years. I had, naturally, ditched Java (and the old job as a code monkey) for good, and was hacking away with Python, mostly happily. However, I had another date with destiny coming up: a superficially similar scripting language called Ruby was on the rise, and to find out what all the fuss was about, I went ahead and learned that, too.&lt;/p&gt;

&lt;p&gt;The similarity between Python and Ruby turned out to be skin-deep. After grokking the initially strange new idioms in Ruby, I recognized that it was a yet more powerful language than Python &amp;#8212; the abstraction gap wasn&amp;#8217;t anything as wide as it had been from Java to Python, but it was definitely there. The Ruby community also offered a (for me) more attractive philosophy than &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Python_philosophy&#34; target=&#34;_blank&#34;&gt;Python&amp;#8217;s&lt;/a&gt; &amp;#8220;our way or the highway&amp;#8221;, so I promptly chose the highway &amp;#8212; good riddance, Python.&lt;/p&gt;

&lt;p&gt;By this time I had already stumbled across Graham&amp;#8217;s &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://www.paulgraham.com/articles.html&#34; target=&#34;_blank&#34;&gt;eloquent writings&lt;/a&gt; regarding the &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://www.paulgraham.com/avg.html&#34; target=&#34;_blank&#34;&gt;Blub Paradox&lt;/a&gt; and the power continuum of programming languages, and I&amp;#8217;d also read his book &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://www.paulgraham.com/hackpaint.html&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Hackers and Painters&lt;/em&gt;&lt;/a&gt;. From my own first-hand experience, I was thoroughly comfortable with the (at times surprisingly controversial) notion that programming languages indeed do vary in expressive power.&lt;/p&gt;

&lt;p&gt;It was also fast becoming obvious to me that I was something of a power junkie: though I liked Ruby just fine, the grass is always greener on the other side, and soon enough I was curious to find out if there really was something yet more powerful out there. Researching the matter extensively brought me, of course, squarely back to dear &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Lisp_%28programming_language%29&#34; target=&#34;_blank&#34;&gt;Old Faithful&lt;/a&gt;, per Graham&amp;#8217;s very words. Oh, the horror.&lt;/p&gt;

&lt;p&gt;It took some serious mental juggling to overcome the deeply-rooted trauma of my unfortunate first encounter with the language, and to understand that despite the widespread meme that Lisp was dead, &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://lispers.org/&#34; target=&#34;_blank&#34;&gt;it wasn&amp;#8217;t really any deader than usual&lt;/a&gt; that in fact, being not an invention but a discovery, Lisp is essentially unkillable and is destined to rise time and again to the murmured incantations of &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Greenspun%27s_Tenth_Rule&#34; target=&#34;_blank&#34;&gt;Greenspun&amp;#8217;s Tenth&lt;/a&gt; in the pallid, ghostly glow of a display monitor in a dark room, forever and ever.&lt;/p&gt;

&lt;p&gt;More seriously, from my experience with Python and Ruby I had already learned not to judge a book by its cover. After all, I had overcome the weird significant whitespace to hack in Python, as well as Ruby&amp;#8217;s equally weird block syntax to think in &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Closure_%28computer_science%29&#34; target=&#34;_blank&#34;&gt;closures&lt;/a&gt;. I could give a shot at tackling lots of irritating, possibly superfluous parentheses, right? (Besides, I like horror stories, so I knew Lisp would haunt me if I didn&amp;#8217;t.)&lt;/p&gt;

&lt;p&gt;Ruby proved to be the perfect penultimate stepping stone, priming me for Lisp: not only did the language familiarize me with symbols, closures and the basics of &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Metaprogramming&#34; target=&#34;_blank&#34;&gt;metaprogramming&lt;/a&gt;, but many eminent Ruby hackers were also erstwhile Lispers. Ruby&amp;#8217;s Lisp heritage often came up in discussions, and was mostly presented in a favorable light. As &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Yukihiro_Matsumoto&#34; target=&#34;_blank&#34;&gt;Matz&lt;/a&gt;, Ruby&amp;#8217;s creator, explained: &lt;em&gt;&amp;#8220;Some may say Ruby is a bad rip-off of Lisp or Smalltalk, and I admit that. But it is nicer to ordinary people.&amp;#8221;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With uncanny timing, Seibel&amp;#8217;s &lt;em&gt;Practical Common Lisp&lt;/em&gt; was published online at just the right moment to provide instant gratification for my curiosity. I finished the book in a couple of days, followed it up with a good dose of &lt;em&gt;On Lisp&lt;/em&gt;, and as they say, that&amp;#8217;s all she wrote. I had been lost, and now I was found again.&lt;/p&gt;

&lt;h3&gt;What other languages have you been using most?&lt;/h3&gt;

&lt;p&gt;For systems programming, I still use C &amp;#8212; but only as a glorified, somewhat portable assembly language. While I think it fulfills this limited role adequately, I have lately been looking into replacing it with a static subset of Lisp (perhaps something like &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://citeseer.ist.psu.edu/kelsey97prescheme.html&#34; target=&#34;_blank&#34;&gt;Pre-Scheme&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;My daily work, though, mostly involves web development, where my tools of the trade are Ruby and &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/PHP&#34; target=&#34;_blank&#34;&gt;PHP&lt;/a&gt;. I use Ruby because it&amp;#8217;s an enjoyable and thorougly dynamic language, essentially &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Smalltalk&#34; target=&#34;_blank&#34;&gt;Smalltalk&lt;/a&gt; for the mainstream. It&amp;#8217;s nowhere near as &amp;#8220;pure&amp;#8221; as Smalltalk, but still manages to swing some pretty powerful metaprogramming facilities (as demonstrated by the &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Ruby_on_Rails&#34; target=&#34;_blank&#34;&gt;Rails&lt;/a&gt; web framework).&lt;/p&gt;

&lt;p&gt;I use &lt;span class=&#34;caps&#34;&gt;PHP&lt;/span&gt; simply because it is ubiquitous and, despite the language&amp;#8217;s obvious failings, there&amp;#8217;re some very useful web applications written in &lt;span class=&#34;caps&#34;&gt;PHP&lt;/span&gt;. It&amp;#8217;s a dynamic language (which makes it tolerable), but not a particularly good one; if I had to describe &lt;span class=&#34;caps&#34;&gt;PHP&lt;/span&gt; in one adjective, it would be &amp;#8220;impoverished&amp;#8221;. That only applies to its abstractive capabilities, though, and not to the wealth of available libraries and software, or to the massive commercial and open-source ecosystem thriving around the language. Still, as Java could be described as the present-day &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/COBOL&#34; target=&#34;_blank&#34;&gt;COBOL&lt;/a&gt;, so &lt;span class=&#34;caps&#34;&gt;PHP&lt;/span&gt; is essentially &lt;span class=&#34;caps&#34;&gt;BASIC&lt;/span&gt; or &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Pascal_%28programming_language%29&#34; target=&#34;_blank&#34;&gt;Pascal&lt;/a&gt; for the web; if used in isolation, it will surely cripple the mind.&lt;/p&gt;

&lt;p&gt;Other languages I use on a semi-regular basis are Python and &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/JavaScript&#34; target=&#34;_blank&#34;&gt;JavaScript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Something I&amp;#8217;ve noticed in the past year is that Lisp idioms have begun permeating through to my code in other programming languages. This has really thrown a spotlight on the specific limitations of the various languages I use, because so few of them can keep up (Ruby and JavaScript perhaps being the only real contestants, on a good day).&lt;/p&gt;

&lt;p&gt;Most recently, I&amp;#8217;ve been dabbling in &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Haskell_%28programming_language%29&#34; target=&#34;_blank&#34;&gt;Haskell&lt;/a&gt; and &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Erlang_programming_language&#34; target=&#34;_blank&#34;&gt;Erlang&lt;/a&gt; to improve my comprehension of best-of-breed functional programming and distributed computing techniques, respectively; moreover, I&amp;#8217;m keeping close tabs on &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Factor_%28programming_language%29&#34; target=&#34;_blank&#34;&gt;Factor&lt;/a&gt; and other modern &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Forth_%28programming_language%29&#34; target=&#34;_blank&#34;&gt;Forth-derivatives&lt;/a&gt;, and of course, I can&amp;#8217;t help but admire what the Smalltalkers have built with &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Squeak&#34; target=&#34;_blank&#34;&gt;Squeak&lt;/a&gt;. (I suppose once you&amp;#8217;ve reached the &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://imdb.com/title/tt0133093/&#34; target=&#34;_blank&#34;&gt;Source&lt;/a&gt;, being a polyglot becomes second nature.)&lt;/p&gt;

&lt;h3&gt;How far have you gotten in your study of Lisp?&lt;/h3&gt;

&lt;p&gt;Right now, I know just enough to realize how much I have yet to learn. Lisp and the &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Lambda_calculus&#34; target=&#34;_blank&#34;&gt;lambda calculus&lt;/a&gt; served as an eye-opening introduction to the more theoretical aspects of computation and information theory, and have forced me to accept that despite over a decade of practical experience, I didn&amp;#8217;t really have a clue what programming was fundamentally all about. I may still not have a crystal-clear grasp of the &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/The_Answer_to_Life%2C_the_Universe%2C_and_Everything&#34; target=&#34;_blank&#34;&gt;Big Picture&lt;/a&gt;, but at least I&amp;#8217;m on the right path.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve become fairly experienced in Scheme, but am yet somewhat less so in Common Lisp. Despite the early BASIC-induced brain damage, I did manage to successfully rewire my neural pathways to handle all the central new concepts, from higher-order functions and functional programming to closures, multiple dispatch in &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/CLOS&#34; target=&#34;_blank&#34;&gt;CLOS&lt;/a&gt;, &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Continuation&#34; target=&#34;_blank&#34;&gt;continuations&lt;/a&gt;, and, of course, &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://www.gigamonkeys.com/book/practical-parsing-binary-files.html&#34; target=&#34;_blank&#34;&gt;macros&lt;/a&gt; and syntactic abstraction. I&amp;#8217;ve learned first-hand what &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Edsger_Dijkstra&#34; target=&#34;_blank&#34;&gt;Dijkstra&lt;/a&gt; meant when he claimed that Lisp has assisted programmers in thinking &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://lispers.org/&#34; target=&#34;_blank&#34;&gt;previously impossible thoughts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Currently, I&amp;#8217;m busy implementing several small-scale, experimental metacircular interpreters and am pushing further into mastering the wealth of compilation techniques developed over the past four decades. I&amp;#8217;m on my second reading of Christian Quiennec&amp;#8217;s &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://www-spi.lip6.fr/~queinnec/WWW/LiSP.html&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Lisp in Small Pieces&lt;/em&gt;&lt;/a&gt;, and am looking forward to soon tackling Peter Norvig&amp;#8217;s &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://norvig.com/paip.html&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Paradigms of Artificial Intelligence Programming&lt;/em&gt;&lt;/a&gt;, Gregor Kiczales&amp;#8217;s &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://mitpress.mit.edu/catalog/item/default.asp?tid=3925&amp;amp;ttype=2&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;The Art of the Metaobject Protocol&lt;/em&gt;&lt;/a&gt;, and Chris Okasaki&amp;#8217;s &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://www.cambridge.org/us/catalogue/catalogue.asp?isbn=0521663504&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Purely Functional Data Structures&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve also been reading a lot of the relevant academic literature published since the 1970s; for instance, the &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://library.readscheme.org/page1.html&#34; target=&#34;_blank&#34;&gt;Lambda Papers&lt;/a&gt; and the myriad works of &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://home.pipeline.com/~hbaker1/&#34; target=&#34;_blank&#34;&gt;Henry Baker&lt;/a&gt; have been particularly inspiring. I continue to be struck by the harsh reality of the often-asserted, but seldom-accepted, truth that most of the great work in software was indeed done very early on, with virtually no further fundamental progress having been made during the past couple of decades.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s understandable how this state of affairs leads some old-timers to cynically grumble how those who ignore history are doomed to only reinvent it. However, it also implies that there may surely still be a whole untapped frontier before our very noses, with only a comparatively few people seriously attempting to explore it. In &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Alan_Kay&#34; target=&#34;_blank&#34;&gt;Alan Kay&amp;#8217;s&lt;/a&gt; words: &lt;em&gt;&amp;#8220;The real romance is out ahead and yet to come. The computer revolution hasn&amp;#8217;t started yet.&amp;#8221;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If so, then opportunity truly abounds for an ambitious new generation of programmers, unafraid of paradigm shifts and looking to stake their claim &amp;#8212; if they can first find their way to the frontier along the very long, windy road littered with the roadblocks of commonly accepted wisdom and conventional industry practices.&lt;/p&gt;

&lt;h3&gt;What do you think of Lisp so far?&lt;/h3&gt;

&lt;p&gt;Realizing the equivalence between code and data, and understanding how Lisp&amp;#8217;s uniform syntax and macros conspire to bridge the two in practice, was an epiphany something akin to encountering &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Mass-energy_equivalence&#34; target=&#34;_blank&#34;&gt;E=mc&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; for the first time.&lt;/p&gt;

&lt;p&gt;I fully understand how many Lispers feel something like prophets who have ventured to the Other Side, catching a brief glimpse of a higher realm and the transcendent fabric of reality. It&amp;#8217;s no wonder at all that the meme regarding the &amp;#8220;smug Lisp weenies&amp;#8221; persists, and not infrequently hits home, too. How could it be otherwise?&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m thrilled at how Lisp allows me to solve problems in the most direct conceivable representation, meaning that I spend more time thinking about the solution than actually typing it in on the keyboard. I like that any new control structure or language extension I can imagine, I can also implement; I&amp;#8217;m restricted only by my own abilities, not by some arbitrary constraints imposed by the programming language.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m cautiously optimistic about the longevity of sufficiently well-written, abstract Lisp code (that is, code that doesn&amp;#8217;t explicitly rely on incidental present facilities such as &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/IPv4&#34; target=&#34;_blank&#34;&gt;IPv4&lt;/a&gt;). Writing in some other language, I certainly wouldn&amp;#8217;t expect (or want) my code to survive a couple of decades unchanged; whereas with Lisp it seems that might be a real possibility, since you can work at a higher abstraction level, almost directly in touch with the actual problem domain.&lt;/p&gt;

&lt;p&gt;In terms of expressive power, Lisp lacks any true competition due to its unique ability to assimilate any new programming paradigm when one crops up. (Indeed, &amp;#8220;embrace and extend&amp;#8221; would be fitting words to describe the manner in which Common Lisp assimilated object-oriented programming in the 1980s, given that &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/CLOS&#34; target=&#34;_blank&#34;&gt;CLOS&lt;/a&gt; goes far and beyond the &lt;span class=&#34;caps&#34;&gt;OOP&lt;/span&gt; facilities found in most object-oriented mainstream programming languages.)&lt;/p&gt;

&lt;p&gt;What&amp;#8217;s more, as has occasionally been remarked, other programming languages may not be able to catch up to Lisp without actually &lt;strong&gt;becoming&lt;/strong&gt; Lisp &amp;#8212; which would have to be the ultimate expression of Greenspun&amp;#8217;s Tenth: the &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://www.lisperati.com/logo.html&#34; target=&#34;_blank&#34;&gt;alien creature&lt;/a&gt; bursting out from within the rib cage to take over the host.&lt;/p&gt;

&lt;p&gt;In view of all the above, I definitely buy &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://www.paulgraham.com/avg.html&#34; target=&#34;_blank&#34;&gt;Graham&amp;#8217;s argument&lt;/a&gt; that Lisp is a competitive advantage, a supremely malleable medium for exploring the gap between what is currently possible and what is ultimately possible. (Which is the very reason, of course, why Lisp became the lingua franca for that hardest of problems: artificial intelligence.)&lt;/p&gt;

&lt;p&gt;I think this also ties into the perceived smugness of Lispers: the lots of irritating, supposedly superfluous parentheses serve to actually hide the secret weapon in plain sight. It&amp;#8217;s right there, up for grabs, but so very few ever approach it with the right mindset needed to grok it. So, if you are one of those very few, how could you not be a little smug about having been smart enough to self-select into that elite?&lt;/p&gt;

&lt;p&gt;This attitude has a serious flaw, though: a superiority complex of this magnitude inevitably induces complacency. Giddy with the omnipotent abstract power afforded to us by Lisp in its platonic form, it&amp;#8217;s all too easy to ignore the very real problems with the presently-existing, concrete dialects of Lisp.&lt;/p&gt;

&lt;p&gt;So, while I&amp;#8217;m sufficiently convinced that Lisp is the most powerful programming language and paradigm yet invented (or discovered, if you will), I find neither of the major dialects, Common Lisp or Scheme, particularly satisfactory in their present form; Common Lisp is just &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://steve-yegge.blogspot.com/2006/04/lisp-is-not-acceptable-lisp.html&#34; target=&#34;_blank&#34;&gt;plain anachronistic&lt;/a&gt;, and Scheme is too minimalistic to be all that useful in itself.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://web.archive.org/web/20080509054939/http://wiki.alu.org/Bill_Birch%27s_Road_to_Lisp&#34; target=&#34;_blank&#34;&gt;Birch&amp;#8217;s corollary&lt;/a&gt; to Greenspun&amp;#8217;s Tenth rings dangerously true: &lt;em&gt;&amp;#8220;Even an ad-hoc, informally-specified, bug-ridden, slow implementation of half of Common Lisp is better than most other languages.&amp;#8221;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Given that any useful new concept introduced in some lesser language can be copied into Lisp at will, what incentive is there to truly push the envelope in Lisp itself? Apparently not much, if recent history is an indication. The &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Lisp_machine&#34; target=&#34;_blank&#34;&gt;Lisp machines&lt;/a&gt; seem to have been the apex of Lisp, a brilliant achievement still unequalled (except by the &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://squeak.org/&#34; target=&#34;_blank&#34;&gt;Smalltalkers&lt;/a&gt;, as always). These wonderous machines have been followed by two decades of standstill, or even retrograde, progress.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://web.archive.org/web/20080509054939/http://en.wikipedia.org/wiki/Richard_P._Gabriel&#34; target=&#34;_blank&#34;&gt;Richard P. Gabriel&lt;/a&gt; wrote in his famous essay &lt;a href=&#34;https://web.archive.org/web/20080509054939/http://www.dreamsongs.com/WIB.html&#34; target=&#34;_blank&#34;&gt;Lisp: Good News, Bad News, How to Win Big&lt;/a&gt;: &lt;em&gt;&amp;#8220;On the other hand, there should be a strong effort towards the next generation of Lisp. The worst thing we can do is to stand still as a community, and that is what is happening.&amp;#8221;&lt;/em&gt; The thing is that Gabriel wrote that in &lt;strong&gt;1991&lt;/strong&gt;, for crying out loud.&lt;/p&gt;

&lt;p&gt;Not only is Common Lisp anachronistic, it seems stagnant, a victim of its own very success. This is why personally I&amp;#8217;ve focused on Scheme instead of Common Lisp: I don&amp;#8217;t want to get trapped into accepting that Common Lisp is already so damned good that it doesn&amp;#8217;t need to change or to be reinvented from time to time. I don&amp;#8217;t want to get comfortable with Common Lisp, and then, gradually, complacent. I want to keep asking: is this all there is?&lt;/p&gt;

&lt;p&gt;The Scheme community is a much more chaotic, fragmented space, but at least the lights are still on. I think Scheme, with its minimalistic, elegant core, provides a decent basis on top of which something new, something truly great, might again be built without having to throw out the baby with the bath water.&lt;/p&gt;

&lt;p&gt;After all, isn&amp;#8217;t perhaps the single most significant quality of Lisp its ability to, without all that much effort, bootstrap a whole new disparate language implementation on top of an existing one, taking full advantage of all the compilation facilities and built-in libraries of the existing implementation?&lt;/p&gt;

&lt;p&gt;Lisp is literally the perfect language for reinventing itself, and I think it&amp;#8217;s about time it did so.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
